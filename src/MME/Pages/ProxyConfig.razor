@page "/proxy-config"
@using MME.Domain.Services
@using AntDesign
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject IProxyService ProxyService
@inject IMessageService MessageService
@inject IJSRuntime JSRuntime

<PageTitle>代理配置管理</PageTitle>

<div class="page-container">
    <PageHeader Title="代理配置管理" SubTitle="管理HTTP API代理配置，支持全站代理和特定路径代理">
        <PageHeaderExtra>
            <Button Type="@ButtonType.Primary" Icon="plus" OnClick="ShowCreateModal">
                添加配置
            </Button>
        </PageHeaderExtra>
    </PageHeader>

    <Card>
        <Table DataSource="@configs" TItem="MME.Domain.Repositories.ProxyConfig" Loading="@loading" Bordered ScrollX="1400">
            <AntDesign.Column Title="配置名称" DataIndex="Name" TData="string" Width="120" />
            <AntDesign.Column Title="目标地址" DataIndex="TargetUrl" TData="string" Width="150">
                <Text Code>@context.TargetUrl</Text>
            </AntDesign.Column>
            <AntDesign.Column Title="Bearer Token" DataIndex="BearerToken" TData="string" Width="250">
                <div style="display: flex; align-items: center; gap: 8px;">
                    <Text Code Copyable>@context.BearerToken</Text>
                    <div style="display: flex; flex-direction: column; gap: 4px;">
                        <Button Type="@ButtonType.Link" Size="@ButtonSize.Small" 
                                Icon="reload" OnClick="() => RefreshToken(context.Id)">
                            刷新
                        </Button>
                    </div>
                </div>
            </AntDesign.Column>
            <AntDesign.Column Title="状态" DataIndex="IsEnabled" TData="bool" Width="50">
                <Switch Value="@context.IsEnabled" OnChange="(value) => ToggleConfig(context.Id, value)" />
            </AntDesign.Column>
            <AntDesign.Column Title="代理模式" TData="string" Width="180">
                <div style="max-height: 60px; overflow-y: auto;">
                    @{
                        var proxyModeInfo = GetProxyModeDisplay(context.SupportedPaths);
                    }
                    @if (proxyModeInfo.IsFullSite)
                    {
                        <Tag Color="@("green")" Style="margin: 2px; font-size: 12px;">
                            <Icon Type="global" Style="margin-right: 4px;" />
                            全站代理
                        </Tag>
                    }
                    else
                    {
                        <Tag Color="@("blue")" Style="margin: 2px; font-size: 12px;">
                            <Icon Type="api" Style="margin-right: 4px;" />
                            特定路径
                        </Tag>
                        @foreach (var path in proxyModeInfo.Paths.Take(3))
                        {
                            <Tag Style="margin: 2px; font-size: 12px;">@path</Tag>
                        }
                        @if (proxyModeInfo.Paths.Length > 3)
                        {
                            <Tag Style="margin: 2px; font-size: 12px;">+@(proxyModeInfo.Paths.Length - 3)更多</Tag>
                        }
                    }
                </div>
            </AntDesign.Column>
         
            <ActionColumn Title="操作" Width="120">
                <Space>
                    <SpaceItem>
                        <Button Type="@ButtonType.Primary" Size="@ButtonSize.Small" 
                                Icon="edit" OnClick="() => ShowEditModal(context)">
                            编辑
                        </Button>
                    </SpaceItem>
                    <SpaceItem>
                        <Popconfirm Title="确定要删除这个配置吗？" 
                                    OnConfirm="() => DeleteConfig(context.Id)">
                            <Button Type="@ButtonType.Primary" Danger Size="@ButtonSize.Small" 
                                    Icon="delete">
                                删除
                            </Button>
                        </Popconfirm>
                    </SpaceItem>
                </Space>
            </ActionColumn>
        </Table>
    </Card>
</div>

<!-- 创建/编辑模态框 -->
<Modal Title="@(editingConfig == null ? "创建代理配置" : "编辑代理配置")" 
       Visible="@modalVisible" 
       OnOk="@HandleOk" 
       OnCancel="@HandleCancel"
       ConfirmLoading="@modalLoading"
       Width="900"
       Centered="true">
    <Form Model="@configForm" LabelCol="new ColLayoutParam { Span = 6 }" WrapperCol="new ColLayoutParam { Span = 18 }">
        
        <!-- 基础配置 -->
        <Divider>
            <Text Strong Style="color: #7F7FFF;">
                <Icon Type="setting" Style="margin-right: 8px;" />
                基础配置
            </Text>
        </Divider>
        
        <Row Gutter="24">
            <Col Span="12">
                <FormItem Label="配置名称" Required>
                    <Input @bind-Value="@configForm.Name" 
                           Placeholder="请输入配置名称" 
                           MaxLength="50"
                           ShowCount />
                </FormItem>
            </Col>
            <Col Span="12">
                <FormItem Label="目标地址" Required>
                    <Input @bind-Value="@configForm.TargetUrl" 
                           Placeholder="例如：https://api.openai.com" />
                </FormItem>
            </Col>
        </Row>
        
        <FormItem Label="API密钥" Required>
            <InputPassword @bind-Value="@configForm.ApiKey" 
                          Placeholder="请输入API密钥" 
                          VisibilityToggle="true" />
        </FormItem>
        
        <FormItem Label="描述信息">
            <TextArea @bind-Value="@configForm.Description" 
                     Placeholder="请输入配置描述信息" 
                     Rows="3" 
                     MaxLength="200"
                     ShowCount />
        </FormItem>
        
        <!-- 高级配置 -->
        <Divider>
            <Text Strong Style="color: #7F7FFF;">
                <Icon Type="control" Style="margin-right: 8px;" />
                高级配置
            </Text>
        </Divider>
        
        <Row Gutter="24">
            <Col Span="12">
                <FormItem Label="超时时间(秒)">
                    <AntDesign.InputNumber @bind-Value="@configForm.TimeoutSeconds" 
                                Min="1" Max="3000" 
                                Placeholder="默认300秒" 
                                Style="width: 100%" />
                </FormItem>
            </Col>
            <Col Span="12">
                <FormItem Label="重试次数">
                    <AntDesign.InputNumber @bind-Value="@configForm.MaxRetries" 
                                Min="0" Max="10" 
                                Placeholder="默认3次" 
                                Style="width: 100%" />
                </FormItem>
            </Col>
        </Row>
        
        <!-- 日志配置 -->
        <Divider>
            <Text Strong Style="color: #7F7FFF;">
                <Icon Type="file-text" Style="margin-right: 8px;" />
                日志配置
            </Text>
        </Divider>
        
        <Row Gutter="24">
            <Col Span="12">
                <FormItem Label="记录请求体">
                    <div>
                        <Switch @bind-Value="@configForm.LogRequestBody" 
                               CheckedChildren="开启" 
                               UnCheckedChildren="关闭" />
                        <div style="color: #8c8c8c; font-size: 12px; margin-top: 4px;">
                            记录API请求的详细内容
                        </div>
                    </div>
                </FormItem>
            </Col>
            <Col Span="12">
                <FormItem Label="记录响应体">
                    <div>
                        <Switch @bind-Value="@configForm.LogResponseBody" 
                               CheckedChildren="开启" 
                               UnCheckedChildren="关闭" />
                        <div style="color: #8c8c8c; font-size: 12px; margin-top: 4px;">
                            记录API响应的详细内容
                        </div>
                    </div>
                </FormItem>
            </Col>
        </Row>
        
        <!-- 代理配置 -->
        <Divider>
            <Text Strong Style="color: #7F7FFF;">
                <Icon Type="global" Style="margin-right: 8px;" />
                代理模式配置
            </Text>
        </Divider>
        
        <FormItem Label="代理模式" LabelCol="new ColLayoutParam { Span = 4 }" WrapperCol="new ColLayoutParam { Span = 20 }">
            <div>
                <RadioGroup @bind-Value="@proxyMode" ButtonStyle="@RadioButtonStyle.Solid">
                    <Radio RadioButton Value="@("full-site")">
                        <Icon Type="global" Style="margin-right: 4px;" />
                        全站代理
                    </Radio>
                    <Radio RadioButton Value="@("specific-paths")">
                        <Icon Type="api" Style="margin-right: 4px;" />
                        特定路径
                    </Radio>
                </RadioGroup>
                <div style="color: #8c8c8c; font-size: 12px; margin-top: 8px;">
                    <Icon Type="info-circle" Style="margin-right: 4px;" />
                    全站代理：代理目标站点的所有请求；特定路径：仅代理指定的API路径
                </div>
            </div>
        </FormItem>
        
        @if (proxyMode == "specific-paths")
        {
            <FormItem Label="自定义路径" LabelCol="new ColLayoutParam { Span = 4 }" WrapperCol="new ColLayoutParam { Span = 20 }">
                <div>
                    <div style="margin-bottom: 12px;">
                        <Text Strong>常用API路径：</Text>
                        <CheckboxGroup @bind-Value="@selectedPaths" Options="@pathOptions" />
                    </div>
                    
                    <div>
                        <Text Strong>自定义路径：</Text>
                        <div style="margin-top: 8px;">
                            <Input.Group Compact>
                                <Input @bind-Value="@customPath" 
                                       Placeholder="输入自定义路径，如：/api/v1/custom" 
                                       Style="width: calc(100% - 80px)" 
                                       OnPressEnter="AddCustomPath" />
                                <Button Type="@ButtonType.Primary" OnClick="AddCustomPath" Icon="plus">
                                    添加
                                </Button>
                            </Input.Group>
                        </div>
                        
                        @if (customPaths.Any())
                        {
                            <div style="margin-top: 12px;">
                                @foreach (var path in customPaths)
                                {
                                    <Tag Closable OnClose="@(() => RemoveCustomPath(path))" Style="margin: 4px;">
                                        @path
                                    </Tag>
                                }
                            </div>
                        }
                    </div>
                    
                    <div style="color: #8c8c8c; font-size: 12px; margin-top: 8px;">
                        <Icon Type="info-circle" Style="margin-right: 4px;" />
                        可以选择常用API路径或添加自定义路径，支持通配符匹配
                    </div>
                </div>
            </FormItem>
        }
        
    </Form>
</Modal>

@code {
    private List<MME.Domain.Repositories.ProxyConfig> configs = new();
    private bool loading = false;
    private bool modalVisible = false;
    private bool modalLoading = false;
    private MME.Domain.Repositories.ProxyConfig? editingConfig = null;
    private ConfigForm configForm = new();
    private string[] selectedPaths = Array.Empty<string>();
    private string proxyMode = "full-site"; // "full-site" 或 "specific-paths"
    private string customPath = string.Empty;
    private List<string> customPaths = new();

    private CheckboxOption<string>[] pathOptions = new[]
    {
        new CheckboxOption<string> { Label = "Chat Completions", Value = "/v1/chat/completions" },
        new CheckboxOption<string> { Label = "Embeddings", Value = "/v1/embeddings" },
        new CheckboxOption<string> { Label = "Rerank", Value = "/v1/rerank" },
        new CheckboxOption<string> { Label = "Models", Value = "/v1/models" },
        new CheckboxOption<string> { Label = "Fine-tuning", Value = "/v1/fine_tuning/jobs" },
        new CheckboxOption<string> { Label = "Images", Value = "/v1/images" },
        new CheckboxOption<string> { Label = "Audio", Value = "/v1/audio" },
        new CheckboxOption<string> { Label = "Files", Value = "/v1/files" },
        new CheckboxOption<string> { Label = "Assistants", Value = "/v1/assistants" }
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadConfigs();
    }

    private async Task LoadConfigs()
    {
        loading = true;
        try
        {
            StateHasChanged();
        }
        catch (Exception)
        {
            // 忽略组件已销毁时的状态更新错误
        }
        
        try
        {
            configs = await ProxyService.GetAllConfigsAsync();
        }
        catch (Exception ex)
        {
            try
            {
                _= MessageService.Error($"加载配置失败：{ex.Message}");
            }
            catch (Exception)
            {
                // 忽略组件已销毁时的消息服务调用错误
            }
        }
        finally
        {
            loading = false;
            try
            {
                StateHasChanged();
            }
            catch (Exception)
            {
                // 忽略组件已销毁时的状态更新错误
            }
        }
    }

    private void ShowCreateModal()
    {
        editingConfig = null;
        configForm = new ConfigForm();
        proxyMode = "full-site";
        selectedPaths = Array.Empty<string>();
        customPaths.Clear();
        customPath = string.Empty;
        modalVisible = true;
    }

    private void ShowEditModal(Domain.Repositories.ProxyConfig config)
    {
        editingConfig = config;
        configForm = new ConfigForm
        {
            Name = config.Name,
            TargetUrl = config.TargetUrl,
            ApiKey = config.ApiKey,
            Description = config.Description,
            TimeoutSeconds = config.TimeoutSeconds,
            MaxRetries = config.MaxRetries,
            LogRequestBody = config.LogRequestBody,
            LogResponseBody = config.LogResponseBody
        };
        
        // 解析代理模式和路径
        customPaths.Clear();
        customPath = string.Empty;
        
        try
        {
            if (string.IsNullOrEmpty(config.SupportedPaths) || config.SupportedPaths == "[]")
            {
                // 空配置或空数组表示全站代理
                proxyMode = "full-site";
                selectedPaths = Array.Empty<string>();
            }
            else
            {
                var paths = System.Text.Json.JsonSerializer.Deserialize<string[]>(config.SupportedPaths) ?? Array.Empty<string>();
                
                if (paths.Length == 0 || (paths.Length == 1 && paths[0] == "*"))
                {
                    // 通配符或空数组表示全站代理
                    proxyMode = "full-site";
                    selectedPaths = Array.Empty<string>();
                }
                else
                {
                    // 特定路径代理
                    proxyMode = "specific-paths";
                    
                    // 分离预定义路径和自定义路径
                    var predefinedPaths = pathOptions.Select(p => p.Value).ToHashSet();
                    var selectedList = new List<string>();
                    
                    foreach (var path in paths)
                    {
                        if (predefinedPaths.Contains(path))
                        {
                            selectedList.Add(path);
                        }
                        else
                        {
                            customPaths.Add(path);
                        }
                    }
                    
                    selectedPaths = selectedList.ToArray();
                }
            }
        }
        catch
        {
            // 解析失败时默认为全站代理
            proxyMode = "full-site";
            selectedPaths = Array.Empty<string>();
        }
        
        modalVisible = true;
    }

    private async Task HandleOk()
    {
        if (string.IsNullOrWhiteSpace(configForm.Name) || 
            string.IsNullOrWhiteSpace(configForm.TargetUrl) || 
            string.IsNullOrWhiteSpace(configForm.ApiKey))
        {
            try { _ = MessageService.Warning("请填写所有必填字段"); } catch { }
            return;
        }

        modalLoading = true;
        try
        {
            StateHasChanged();
        }
        catch (Exception)
        {
            // 忽略组件已销毁时的状态更新错误
        }

        try
        {
            string supportedPathsJson;
            
            if (proxyMode == "full-site")
            {
                // 全站代理使用通配符
                supportedPathsJson = System.Text.Json.JsonSerializer.Serialize(new[] { "*" });
            }
            else
            {
                // 特定路径代理，合并预定义路径和自定义路径
                var allPaths = selectedPaths.Concat(customPaths).Distinct().ToArray();
                supportedPathsJson = System.Text.Json.JsonSerializer.Serialize(allPaths);
            }
            
            if (editingConfig == null)
            {
                await ProxyService.CreateConfigAsync(
                    configForm.Name,
                    configForm.TargetUrl,
                    configForm.ApiKey,
                    configForm.Description,
                    supportedPathsJson,
                    configForm.TimeoutSeconds,
                    configForm.MaxRetries,
                    configForm.LogRequestBody,
                    configForm.LogResponseBody);
                try { _ = MessageService.Success("配置创建成功"); } catch { }
            }
            else
            {
                await ProxyService.UpdateConfigAsync(
                    editingConfig.Id,
                    configForm.Name,
                    configForm.TargetUrl,
                    configForm.ApiKey,
                    configForm.Description,
                    supportedPathsJson,
                    configForm.TimeoutSeconds,
                    configForm.MaxRetries,
                    configForm.LogRequestBody,
                    configForm.LogResponseBody);
                try { _ = MessageService.Success("配置更新成功"); } catch { }
            }

            modalVisible = false;
            await LoadConfigs();
        }
        catch (Exception ex)
        {
            try { _ = MessageService.Error($"操作失败：{ex.Message}"); } catch { }
        }
        finally
        {
            modalLoading = false;
            try
            {
                StateHasChanged();
            }
            catch (Exception)
            {
                // 忽略组件已销毁时的状态更新错误
            }
        }
    }

    private void HandleCancel()
    {
        modalVisible = false;
        configForm = new ConfigForm();
        editingConfig = null;
        proxyMode = "full-site";
        selectedPaths = Array.Empty<string>();
        customPaths.Clear();
        customPath = string.Empty;
    }

    private async Task DeleteConfig(Guid id)
    {
        try
        {
            await ProxyService.DeleteConfigAsync(id);
            try { _ = MessageService.Success("配置删除成功"); } catch { }
            await LoadConfigs();
        }
        catch (Exception ex)
        {
            try { _= MessageService.Error($"删除失败：{ex.Message}"); } catch { }
        }
    }

    private async Task ToggleConfig(Guid id, bool isEnabled)
    {
        try
        {
            await ProxyService.ToggleConfigAsync(id, isEnabled);
            try { _= MessageService.Success(isEnabled ? "配置已启用" : "配置已禁用"); } catch { }
            await LoadConfigs();
        }
        catch (Exception ex)
        {
            try { _= MessageService.Error($"操作失败：{ex.Message}"); } catch { }
        }
    }

    private async Task RefreshToken(Guid id)
    {
        try
        {
            var newToken = await ProxyService.RefreshBearerTokenAsync(id);
            try { _= MessageService.Success("Token刷新成功"); } catch { }
            await LoadConfigs();
        }
        catch (Exception ex)
        {
            try { _= MessageService.Error($"刷新失败：{ex.Message}"); } catch { }
        }
    }

    private (bool IsFullSite, string[] Paths) GetProxyModeDisplay(string supportedPaths)
    {
        try
        {
            if (string.IsNullOrEmpty(supportedPaths))
                return (true, Array.Empty<string>());
                
            var paths = System.Text.Json.JsonSerializer.Deserialize<string[]>(supportedPaths) ?? Array.Empty<string>();
            
            if (paths.Length == 0 || (paths.Length == 1 && paths[0] == "*"))
            {
                return (true, Array.Empty<string>());
            }
            
            // 显示时去掉 /v1/ 前缀，让路径更简洁
            var displayPaths = paths.Select(p => p.StartsWith("/v1/") ? p.Substring(4) : p).ToArray();
            return (false, displayPaths);
        }
        catch
        {
            return (true, Array.Empty<string>());
        }
    }
    
    private void AddCustomPath()
    {
        if (!string.IsNullOrWhiteSpace(customPath) && !customPaths.Contains(customPath))
        {
            customPaths.Add(customPath.Trim());
            customPath = string.Empty;
        }
    }
    
    private void RemoveCustomPath(string path)
    {
        customPaths.Remove(path);
    }

    public class ConfigForm
    {
        public string Name { get; set; } = string.Empty;
        public string TargetUrl { get; set; } = string.Empty;
        public string ApiKey { get; set; } = string.Empty;
        public string? Description { get; set; }
        public int TimeoutSeconds { get; set; } = 300;
        public int MaxRetries { get; set; } = 3;
        public bool LogRequestBody { get; set; } = true;
        public bool LogResponseBody { get; set; } = true;
    }
}

<style>
    .page-container {
        padding: 24px;
    }

    /* 弹窗优化样式 */
    .ant-modal-body {
        max-height: 75vh;
        overflow-y: auto;
        padding: 24px;
    }

    /* 分组标题样式 */
    .ant-divider {
        margin: 24px 0 20px 0;
        font-size: 16px;
    }

    .ant-divider:first-of-type {
        margin-top: 8px;
    }

    /* 表单项间距优化 */
    .ant-form-item {
        margin-bottom: 24px;
    }

    /* 输入框增强样式 */
    .ant-input, .ant-input-password, .ant-input-number {
        border-radius: 6px;
        transition: all 0.3s;
    }

    .ant-input:focus, .ant-input-password:focus, .ant-input-number:focus {
        border-color: #40a9ff;
        box-shadow: 0 0 0 2px rgba(24, 144, 255, 0.2);
    }

    /* 开关组件样式 */
    .ant-switch {
        margin-bottom: 8px;
    }

    /* 复选框组美化 */
    .ant-checkbox-group {
        display: flex;
        flex-wrap: wrap;
        gap: 12px;
    }

    .ant-checkbox-wrapper {
        padding: 8px 12px;
        border: 1px solid #f0f0f0;
        border-radius: 6px;
        transition: all 0.3s;
    }

    .ant-checkbox-wrapper:hover {
        border-color: #d9d9d9;
        background-color: #fafafa;
    }

    .ant-checkbox-wrapper-checked {
        border-color: #7F7FFF;
        background-color: #f6ffed;
    }

    /* 响应式设计 */
    @@media (max-width: 768px) {
        .ant-modal {
            max-width: 95vw;
            margin: 10px auto;
        }
        
        .ant-col-12 {
            width: 100% !important;
            margin-bottom: 16px;
        }
        
        .ant-form-item-label {
            text-align: left !important;
        }
    }
</style>